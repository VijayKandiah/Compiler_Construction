(:main
    (:main
        0 0
        %arr_size <- 21
        rdi <- %arr_size
        rsi <- 7
        %arr_size >>= 1
        call allocate 2
        %count <- 0
        %address <- rax
        :true
        %address += 8
        rdi <- 2
        rsi <- %count
        mem rsp -8 <- :power_ret
        call :power 2
        :power_ret
        rdi <- rax
        mem rsp -8 <- :encode_ret
        call :encode 1
        :encode_ret
        r14 <- %address
        mem r14 0 <- rax // store index in array
        rdi <- rax  
        call print 1
        %count++ 
        cjump %count < %arr_size :true :done
        :done
        return
    )
    (:power
        2 0
        %base <- rdi
        %power_of_two <- rsi
        %base <<= %power_of_two
        rax <- %base
        return
    )
    (:encode
        1 0
        %number <- rdi
        %number <<= 1
        %number += 1
        rax <- %number
        return
    )
)