// Prime numbers: isPrime, modulo

define :isPrime(%n) {
    // decode %n
    %n <- %n - 1
    %n <- %n >> 1

    %isNLessThan2 <- %n < 2
    br %isNLessThan2 :false
    br :check

    :false
        return 1

    :check
        %i <- 2
        %end <- %n - 1

        :loop
            %isIteratorLessThanEnd <- %i < %end
            br %isIteratorLessThanEnd :continue
            br :true

            :continue
                %encodedI <- %i << 1
                %encodedI <- %encodedI + 1
                %encodedN <- %n << 1
                %encodedN <- %encodedN + 1
                %remainder <- call :modulo(%encodedN, %encodedI)
                %i <- %i + 1
                %isDivisible <- %remainder = 1
                br %isDivisible :false
                br :loop

    :true
        return 3
}

// %a % %b
define :modulo(%a, %b) {
    %result <- %a

    %isBLessThanZero <- %b <= 1
    br %isBLessThanZero :undefined
    br :defined

    :undefined
        return -1

    :defined
        %isALessThanB <- %a < %b
        br %isALessThanB :terminate
        br :continue

        :terminate
            return %result

        :continue
            %result <- %result - 1
            %result <- %result >> 1

            %b <- %b - 1
            %b <- %b >> 1

            %result <- %result - %b

            %result <- %result << 1
            %result <- %result + 1

            %b <- %b << 1
            %b <- %b + 1

            %isResultLessThanB <- %result < %b
            br %isResultLessThanB :terminate
            br :continue
}

define :main() {
    // Module tests
    %first <- 25 // 12
    %second <- 11 // 5
    %remainder <- call :modulo(%first, %second)
    call print(%remainder)   // expects 2

    %first <- 25 // 12
    %second <- 9 // 4
    %remainder <- call :modulo(%first, %second)
    call print(%remainder)  // expects 0

    %first <- 25 // 12
    %second <- 1 // 0
    %remainder <- call :modulo(%first, %second)
    call print(%remainder)  // expects -1

    %first <- 125
    %second <- 35
    %remainder <- call :modulo(%first, %second)
    call print(%remainder) // expects 11

    // isPrime tests
    %number <- 1 // 0
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 0

    %number <- 3 // 1
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 0

    %number <- 51 // 25
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 0

    %number <- 21 // 10
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 0

    %number <- 35 // 17
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 1

    %number <- 135 // 67
    %is_prime <- call :isPrime(%number)
    call print(%is_prime) // expects 1

    return
}
